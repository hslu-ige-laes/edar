[["index.html", "Energy Data Analysis with R Chapter 1 Introduction 1.1 Content 1.2 Why R and RStudio? 1.3 Other useful sources", " Energy Data Analysis with R Reto Marek 2020-11-11 Chapter 1 Introduction Preface This book gives you an overview of the statistical software R and its ability to analyze and visualize time series in the context of building energy and comfort. It is aimed at R beginners as well as exerienced R users and is strongly inspired by the R Graphics Cookbook and Engineering Data Analysis in R. The aim of this book is to provide additional specific recipes for energy and comfort related tasks and to make your entry into R smooth and easy. 1.1 Content The book is independently structured and a beginner gets information on how to install the program environment and gets a quick practical introduction. The examples in this book will show you how to complete certain specific tasks. Examples are shown so that you can understand the basic principle and reproduce the analysis or visualization with your own data. Simply copy the code into your R-script, replace the sample data files with your own and execute the code. This book was developed using Yihui Xies bookdown framework. The book is built using code that combines R code, data, and text to create a book for which R code and examples can be re-executed every time the book is re-built. The online book is hosted using GitHubs free GitHub Pages. All material for this book is available and can be explored at the books GitHub repository. 1.2 Why R and RStudio? In a study commissioned by the Swiss Federal Office of Energy, experts from the field were asked how and where they perform energy analyses and create visualizations. The result was that many people today either need Excel or use a building monitoring software to execute analysis and create visualizations. Excel users are pushing the program to its limits with the ever-increasing data sets. Also the interactive ability of the graphics there is limited. The change to an environment like R seems to be difficult for many. In the market there are numerous books which make the change to R for other disciplines easier. However, experts from the energy and building services engineering industry lack a corresponding work. The present book is intended to close this gap. The freely available programming language R and its graphical user interface RStudio offer many more possibilities for data analysis and data visualization. 1.3 Other useful sources A really good source is R for Data Science by Garrett Grolemund and Hadley Wickham. The entire book is freely available online through the same format of this book. There are a number of other useful books available on general R programming, including: R Graphics Cookbook Introduction to Data Science - Data Analysis and Prediction Algorithms with R Hands-On Programming with R Engineering Data Analysis in R "],["getting-started.html", "Chapter 2 Getting started 2.1 Install R and R Studio 2.2 Install required packages 2.3 Create your first R Script and visualization 2.4 Whats next?", " Chapter 2 Getting started 2.1 Install R and R Studio Before we can start the first analysis, we have to install R and RStudio. This may seem laborious, but it is necessary and easier than it appears at first glance. R is a programming language used for statistical computing while RStudio provides a graphical user interface R may be used without RStudio, but RStudio may not be used without R Both, R and RStudio are free of charge and there are no licencse fees When you later make an analysis and visualizations, you only work in the graphical user interface RStudio 2.1.1 Download and Install R 2.1.1.1 Windows Open https://cran.r-project.org/bin/windows/base/ and press the link Download R Run the downloaded installer file and follow the installation wizard The wizard will install R into your Program Files folders and adds a shortcut in your Start menu. Note that you will need to have all necessary administration rights to install new software on your machine. 2.1.1.2 Mac OSX Open https://cran.r-project.org/bin/macosx/ and download the latest *.pkg file Run the downloaded installer file and follow the installation wizard The installer allows you to customize your installation. However the default values will be suitable for most users. 2.1.1.3 Linux R is part of many Linux distributions, therefore you should check with your Linux package management system if its already installed. The CRAN website provides files to build R from source on Debian, Redhat, SUSE, and Ubuntu systems under the link Download R for Linux Open https://cran.r-project.org/bin/linux/ and then follow the directory trail to the version of Linux you wish to install R on top of The exact installation procedure will vary depending on your Linux operating system. CRAN supports the process by grouping each set of source files with documentation or README files that explain how to install on your system. 2.1.2 Download and Install RStudio R Studio is a development environment for R. Open https://rstudio.com/products/rstudio/download/ and download RStudio Desktop Open Source Follow the on-screen instructions Once you have installed R Studio, you can run it like any other application by clicking the program icon 2.2 Install required packages Chapter A gives you an introduction to what a package is and how to install it. Below are the packages used in this book and it is recommended to install them now. Open RStudio just as you would any program, by clicking on its icon Copy the following code and paste it into your console (on the bottom left, right of the symbol &gt;): install.packages(&quot;devtools&quot;, &quot;tidyverse&quot;, &quot;plotly&quot;, &quot;lubridate&quot;, &quot;r2d3&quot;) install_github(&quot;hslu-ige-laes/redutils&quot;) Press Enter or Return The installation of the packages is now in progress and this may take a while, please be patient. In the meantime you can read in chapter A what packages are in detail and how they can be installed and later loaded into scripts. 2.3 Create your first R Script and visualization Finally, you have installed R and RStudio with the first set of packages on your computer. Lets create the first visualization. Open RStudio just as you would any program, by clicking on its icon Go to the menu on the top left and click to File / New File / R Script Copy the following code and paste it into your script: library(graphics) plot(co2, ylab = &quot;CO2 (ppm)&quot;, las = 1) title(main = &quot;Mauna Loa Atmospheric CO2 Concentration&quot;) select all by pressing Ctrl + A Thren run the code by pressing the Run Button or Ctrl + Enter You should now get your first visualization: 2.4 Whats next? Now hopefully, everything has worked fine so far with the installation and your first visualization. Congratulations! You have now a running R environment and we can start with more interesting stuff. The following chapters will give you an overview "],["r-basics.html", "Chapter 3 R Basics 3.1 Loading Data", " Chapter 3 R Basics 3.1 Loading Data 3.1.1 Csv File df &lt;- read.csv(&quot;datafile.csv&quot;) df &lt;- read.csv(&quot;datafile.csv&quot;, header=FALSE, stringsAsFactors=FALSE) df &lt;- read.csv(&quot;https://github.com/retomarek/r/raw/master/datasets/buildingMonitoringTestDataSet.csv&quot;, stringsAsFactors=FALSE, sep =&quot;,&quot; ) Attention: By default, strings in the data are treated as factors. read.csv() is a convenience wrapper function around read.table(). If you need more control over the input, see ?read.table 3.1.2 Excel File # Only need to install once install.packages(&quot;xlsx&quot;) library(xslx) df &lt;- read.xlsx(&quot;datafile.xlsx&quot;, 1) df &lt;- read.xlsx(&quot;datafile.xls&quot;, sheetIndex=2) df &lt;- read.xlsx(&quot;datafile.xls&quot;, sheetName=&quot;Revenues&quot;) For reading older Excel files in the .xls format, the gdata package has the function read.xls(): # Only need to install once install.packages(&quot;gdata&quot;) library(gdata) # Read first sheet df &lt;- read.xls(&quot;datafile.xls&quot;) df &lt;- read.xls(&quot;datafile.xls&quot;, sheet=2) Both the xlsx and gdata packages require other software to be installed on your computer. For xlsx, you need to install Java on your machine. For gdata, you need Perl, which comes as standard on Linux and Mac OS X, but not Windows. On Windows, youll need ActiveState Perl. The Community Edition can be obtained for free. "],["data-wrangling.html", "Chapter 4 Data Wrangling 4.1 Add Metadata for later filtering 4.2 Data Frames", " Chapter 4 Data Wrangling 4.1 Add Metadata for later filtering Firstly we have to load a dataset into a dataframe: # load data set df &lt;- read.csv(&quot;https://github.com/hslu-ige-laes/edar/raw/master/sampleData/centralOutsideTemp.csv&quot;, stringsAsFactors=FALSE, sep =&quot;;&quot;) 4.1.1 Year, Month, Day, Day of Week To group, filter and aggregate data we need to have a the date splitted up in day, month and year separately: library(dplyr) library(lubridate) df$time &lt;- parse_date_time(df$time, &quot;YmdHMS&quot;, tz = &quot;Europe/Zurich&quot;) df$year &lt;- as.Date(cut(df$time, breaks = &quot;year&quot;)) df$month &lt;- as.Date(cut(df$time, breaks = &quot;month&quot;)) df$day &lt;- as.Date(cut(df$time, breaks = &quot;day&quot;)) df$weekday &lt;- weekdays(df$time) This code first parses the timestamp with a specific timezone. Then three columns are added. Please note that the month also contains the year and a day. This is useful for a later step where you can group the series afterwards. head(df,2) ## time centralOutsideTemp year month day ## 1 2018-03-21 11:00:00 5.2 2018-01-01 2018-03-01 2018-03-21 ## 2 2018-03-21 12:00:00 6.7 2018-01-01 2018-03-01 2018-03-21 ## weekday ## 1 Mittwoch ## 2 Mittwoch tail(df,2) ## time centralOutsideTemp year month day ## 21864 2020-09-17 10:00:00 26.65 2020-01-01 2020-09-01 2020-09-17 ## 21865 2020-09-17 11:00:00 28.10 2020-01-01 2020-09-01 2020-09-17 ## weekday ## 21864 Donnerstag ## 21865 Donnerstag 4.1.2 Season of Year For some analyses it is useful to color single points of a scatterplot according to the season. For this we need to have the season in a separate column: # install redutils library # devtools::install_github(&quot;retomarek/redutils&quot;, ref = &quot;master&quot;) # get season from a date redutils::season(as.Date(&quot;2019-04-01&quot;)) ## [1] &quot;Spring&quot; If you want to change the language, you can give the function dedicated names for the season: redutils::season(as.Date(&quot;2019-04-01&quot;), c(&quot;Winter&quot;,&quot;Frühling&quot;,&quot;Sommer&quot;,&quot;Herbst&quot;)) ## [1] &quot;Frühling&quot; To apply this function to a whole dataframe we can use the dplyr mutate function. The code below creates a new column named season: # apply it for a data frame df &lt;- dplyr::mutate(df, season = redutils::season(df$time)) head(df,2) ## time centralOutsideTemp year month day ## 1 2018-03-21 11:00:00 5.2 2018-01-01 2018-03-01 2018-03-21 ## 2 2018-03-21 12:00:00 6.7 2018-01-01 2018-03-01 2018-03-21 ## weekday season ## 1 Mittwoch Spring ## 2 Mittwoch Spring tail(df,2) ## time centralOutsideTemp year month day ## 21864 2020-09-17 10:00:00 26.65 2020-01-01 2020-09-01 2020-09-17 ## 21865 2020-09-17 11:00:00 28.10 2020-01-01 2020-09-01 2020-09-17 ## weekday season ## 21864 Donnerstag Fall ## 21865 Donnerstag Fall 4.2 Data Frames Firstly we have to load a dataset into a dataframe: # load data set df &lt;- read.csv(&quot;https://github.com/hslu-ige-laes/edar/raw/master/sampleData/flatTempHum.csv&quot;, stringsAsFactors=FALSE, sep =&quot;;&quot;) 4.2.1 Change Row Names # Print the header and the first line head(df, 1) ## time FlatA_Hum FlatA_Temp FlatB_Hum FlatB_Temp FlatC_Hum ## 1 2018-10-03 00:00:00 53 24.43 38.8 22.4 44 ## FlatC_Temp FlatD_Hum FlatD_Temp ## 1 24.5 49 24.43 # rename columns and print the header and the first line names(df) &lt;- c(&quot;timestamp&quot;,&quot;Hum_A&quot;,&quot;Temp_A&quot;,&quot;Hum_B&quot;,&quot;Temp_B&quot;,&quot;Hum_C&quot;,&quot;Temp_C&quot;,&quot;Hum_D&quot;, &quot;Temp_D&quot;) head(df, 1) ## timestamp Hum_A Temp_A Hum_B Temp_B Hum_C Temp_C Hum_D Temp_D ## 1 2018-10-03 00:00:00 53 24.43 38.8 22.4 44 24.5 49 24.43 4.2.2 Wide to Long # create a copy of the dataframe and print the header and the first five line head(df, 5) ## timestamp Hum_A Temp_A Hum_B Temp_B Hum_C Temp_C Hum_D Temp_D ## 1 2018-10-03 00:00:00 53.0 24.43 38.8 22.40 44.0 24.5 49.0 24.43 ## 2 2018-10-03 01:00:00 53.0 24.40 38.8 22.40 44.0 24.5 49.0 24.40 ## 3 2018-10-03 02:00:00 53.0 24.40 39.3 22.40 44.7 24.5 48.3 24.38 ## 4 2018-10-03 03:00:00 53.0 24.40 40.3 22.40 45.0 24.5 48.0 24.33 ## 5 2018-10-03 04:00:00 53.3 24.40 41.0 22.37 45.2 24.5 47.7 24.30 # convert wide to long format df.long &lt;- as.data.frame(tidyr::pivot_longer(df, cols = -timestamp, names_to = &quot;sensor&quot;, values_to = &quot;value&quot;, values_drop_na = TRUE) ) # long format head(df.long, 16) ## timestamp sensor value ## 1 2018-10-03 00:00:00 Hum_A 53.00 ## 2 2018-10-03 00:00:00 Temp_A 24.43 ## 3 2018-10-03 00:00:00 Hum_B 38.80 ## 4 2018-10-03 00:00:00 Temp_B 22.40 ## 5 2018-10-03 00:00:00 Hum_C 44.00 ## 6 2018-10-03 00:00:00 Temp_C 24.50 ## 7 2018-10-03 00:00:00 Hum_D 49.00 ## 8 2018-10-03 00:00:00 Temp_D 24.43 ## 9 2018-10-03 01:00:00 Hum_A 53.00 ## 10 2018-10-03 01:00:00 Temp_A 24.40 ## 11 2018-10-03 01:00:00 Hum_B 38.80 ## 12 2018-10-03 01:00:00 Temp_B 22.40 ## 13 2018-10-03 01:00:00 Hum_C 44.00 ## 14 2018-10-03 01:00:00 Temp_C 24.50 ## 15 2018-10-03 01:00:00 Hum_D 49.00 ## 16 2018-10-03 01:00:00 Temp_D 24.40 4.2.3 Long to Wide # long format head(df.long) ## timestamp sensor value ## 1 2018-10-03 00:00:00 Hum_A 53.00 ## 2 2018-10-03 00:00:00 Temp_A 24.43 ## 3 2018-10-03 00:00:00 Hum_B 38.80 ## 4 2018-10-03 00:00:00 Temp_B 22.40 ## 5 2018-10-03 00:00:00 Hum_C 44.00 ## 6 2018-10-03 00:00:00 Temp_C 24.50 # convert long table into wide table df.wide &lt;- as.data.frame(tidyr::pivot_wider(df.long, names_from = &quot;sensor&quot;, values_from = &quot;value&quot;) ) # wide format head(df.wide) ## timestamp Hum_A Temp_A Hum_B Temp_B Hum_C Temp_C Hum_D Temp_D ## 1 2018-10-03 00:00:00 53.0 24.43 38.8 22.40 44.0 24.50 49.0 24.43 ## 2 2018-10-03 01:00:00 53.0 24.40 38.8 22.40 44.0 24.50 49.0 24.40 ## 3 2018-10-03 02:00:00 53.0 24.40 39.3 22.40 44.7 24.50 48.3 24.38 ## 4 2018-10-03 03:00:00 53.0 24.40 40.3 22.40 45.0 24.50 48.0 24.33 ## 5 2018-10-03 04:00:00 53.3 24.40 41.0 22.37 45.2 24.50 47.7 24.30 ## 6 2018-10-03 05:00:00 53.7 24.40 41.2 22.30 47.2 24.57 47.2 24.30 4.2.4 Merge two Dataframes library(dplyr) library(lubridate) # read file one and parse dates dfOutsideTemp &lt;- read.csv(&quot;https://github.com/hslu-ige-laes/edar/raw/master/sampleData/centralOutsideTemp.csv&quot;, stringsAsFactors=FALSE, sep =&quot;;&quot;) dfOutsideTemp$time &lt;- parse_date_time(dfOutsideTemp$time, orders = &quot;YmdHMS&quot;, tz = &quot;Europe/Zurich&quot;) # read file two and parse dates dfFlatTempHum &lt;- read.csv(&quot;https://github.com/hslu-ige-laes/edar/raw/master/sampleData/flatTempHum.csv&quot;, stringsAsFactors=FALSE, sep =&quot;;&quot;) dfFlatTempHum$time &lt;- parse_date_time(dfFlatTempHum$time, order = &quot;YmdHMS&quot;, tz = &quot;Europe/Zurich&quot;) # merge the two files into a new data frame and keep only rows where all values are available df &lt;- merge(dfOutsideTemp, dfFlatTempHum, by = &quot;time&quot;) %&gt;% na.omit() "],["explorative-data-analysis.html", "Chapter 5 Explorative Data Analysis 5.1 Get overview 5.2 Basic plots", " Chapter 5 Explorative Data Analysis 5.1 Get overview Get an overview of the whole data set and specific series of it 5.1.1 Load data Load test data set in a data frame (e.g. from a csv-file) df &lt;- read.csv(&quot;https://github.com/retomarek/r/raw/master/datasets/buildingMonitoringTestDataSet.csv&quot;, stringsAsFactors=FALSE, sep =&quot;,&quot; ) 5.1.2 Names show the column headers of the data frame names(df) ## [1] &quot;time&quot; &quot;WthStnPress&quot; &quot;WthStnHum&quot; ## [4] &quot;WthStnRain&quot; &quot;WthStnSolRad&quot; &quot;WthStnTemp&quot; ## [7] &quot;WthStnWindDir&quot; &quot;WthStnWindSpd&quot; &quot;BldgEnergyHotwater&quot; ## [10] &quot;BldgEnergyHeating&quot; &quot;FlatHum&quot; &quot;FlatTemp&quot; ## [13] &quot;FlatVolFlowColdwater&quot; &quot;FlatVolFlowHotwater&quot; 5.1.3 Structure show the structure of the data frame str(df) ## &#39;data.frame&#39;: 16394 obs. of 14 variables: ## $ time : chr &quot;2018-09-30T22:00:00.000Z&quot; &quot;2018-09-30T23:00:00.000Z&quot; &quot;2018-10-01T00:00:00.000Z&quot; &quot;2018-10-01T01:00:00.000Z&quot; ... ## $ WthStnPress : num 1012 1012 1011 1011 1011 ... ## $ WthStnHum : num 87 87.5 87.5 86.5 88 89 86.5 81 78 80.5 ... ## $ WthStnRain : num 0.8 1.1 0.5 0.5 0.6 0.1 0.2 0 0 0 ... ## $ WthStnSolRad : num 0 0 0 0 0 0 0 0 3 24.5 ... ## $ WthStnTemp : num 12.8 12.4 11.9 11.9 11.6 ... ## $ WthStnWindDir : num 157.5 11.2 146.2 157.5 146.2 ... ## $ WthStnWindSpd : num 3.2 1.6 2.4 0.8 2.4 0.8 0.8 3.2 4 3.2 ... ## $ BldgEnergyHotwater : num 0 19 0 0 0 ... ## $ BldgEnergyHeating : num 0 0 0 0 0 0 0 0 0 0 ... ## $ FlatHum : num NA NA NA NA NA NA NA NA NA NA ... ## $ FlatTemp : num NA NA NA NA NA NA NA NA NA NA ... ## $ FlatVolFlowColdwater: num 0.006 0 0 0 0.006 ... ## $ FlatVolFlowHotwater : num 0 0 0 0 0 ... 5.1.4 Head/Tail The head and tail functions are generic, so they will work whether your data is stored in a simple data frane, a zoo object, or an xts object. head(df) ## time WthStnPress WthStnHum WthStnRain WthStnSolRad ## 1 2018-09-30T22:00:00.000Z 1012.30 87.0 0.8 0 ## 2 2018-09-30T23:00:00.000Z 1011.90 87.5 1.1 0 ## 3 2018-10-01T00:00:00.000Z 1011.45 87.5 0.5 0 ## 4 2018-10-01T01:00:00.000Z 1010.90 86.5 0.5 0 ## 5 2018-10-01T02:00:00.000Z 1010.55 88.0 0.6 0 ## 6 2018-10-01T03:00:00.000Z 1010.20 89.0 0.1 0 ## WthStnTemp WthStnWindDir WthStnWindSpd BldgEnergyHotwater BldgEnergyHeating ## 1 12.80 157.50 3.2 0 0 ## 2 12.35 11.25 1.6 19 0 ## 3 11.90 146.25 2.4 0 0 ## 4 11.90 157.50 0.8 0 0 ## 5 11.60 146.25 2.4 0 0 ## 6 11.75 22.50 0.8 0 0 ## FlatHum FlatTemp FlatVolFlowColdwater FlatVolFlowHotwater ## 1 NA NA 0.006 0 ## 2 NA NA 0.000 0 ## 3 NA NA 0.000 0 ## 4 NA NA 0.000 0 ## 5 NA NA 0.006 0 ## 6 NA NA 0.000 0 tail(df) ## time WthStnPress WthStnHum WthStnRain WthStnSolRad ## 16389 2020-08-13T18:00:00.000Z 1011.650 74.75 2.19964 9 ## 16390 2020-08-13T19:00:00.000Z 1012.000 79.00 2.19964 0 ## 16391 2020-08-13T20:00:00.000Z 1011.950 78.25 2.19964 0 ## 16392 2020-08-13T21:00:00.000Z 1012.025 76.50 2.19964 0 ## 16393 2020-08-13T22:00:00.000Z 1012.250 73.00 0.00000 0 ## 16394 2020-08-13T23:00:00.000Z NA NA NA NA ## WthStnTemp WthStnWindDir WthStnWindSpd BldgEnergyHotwater ## 16389 22.000 162.00 0.000000 NA ## 16390 20.175 124.25 1.609340 NA ## 16391 19.350 125.00 0.402335 NA ## 16392 19.900 93.00 1.609340 NA ## 16393 20.625 116.25 2.414010 NA ## 16394 NA NA NA NA ## BldgEnergyHeating FlatHum FlatTemp FlatVolFlowColdwater ## 16389 NA NA NA NA ## 16390 NA NA NA NA ## 16391 NA NA NA NA ## 16392 NA NA NA NA ## 16393 NA NA NA NA ## 16394 NA NA NA NA ## FlatVolFlowHotwater ## 16389 NA ## 16390 NA ## 16391 NA ## 16392 NA ## 16393 NA ## 16394 NA 5.1.5 Five number summary reveals details of a specific series summary(df$WthStnTemp) ## Min. 1st Qu. Median Mean 3rd Qu. Max. NA&#39;s ## -5.25 5.50 11.25 11.99 17.35 40.30 12 5.2 Basic plots 5.2.1 Scatterplot 5.2.1.1 plot() # load data set df &lt;- read.csv(&quot;https://github.com/retomarek/r/raw/master/datasets/buildingMonitoringTestDataSet.csv&quot;, stringsAsFactors=FALSE, sep =&quot;,&quot;) # crate simple scatterplot plot(df$WthStnTemp, df$BldgEnergyHeating) "],["data-visualizations.html", "Chapter 6 Data Visualizations 6.1 Room Temperature Reduction 6.2 Building Energy Signature 6.3 Daily Energy Profiles 6.4 Mollier hx Diagram", " Chapter 6 Data Visualizations 6.1 Room Temperature Reduction 6.1.1 Task As part of an energy optimization, you lower the room temperatures in a room and would now like to show the reduction effect using the time series of the room temperature sensor. In the example below you make two optimizations at different dates. You want to create a time series plot with the daily median, min and max value the overall median of each period the desired setpoint 6.1.2 Basis Time series data from e.g. a temperature sensor with unaligned time intervals 6.1.3 Solution library(dplyr) library(lubridate) library(dygraphs) library(xts) library(redutils) library(RColorBrewer) # Settings tempSetpoint = 22.0 startDate = &quot;2018-11-01&quot; endDate = &quot;2019-02-01&quot; optiDate1 = &quot;2018-12-17&quot; optiLabel1 = &quot;Optimization I&quot; optiDate2 = &quot;2019-01-03&quot; optiLabel2 = &quot;Optimization II&quot; optiDelayDays = 5 # read and print data df &lt;- read.csv(&quot;https://github.com/hslu-ige-laes/edar/raw/master/sampleData/flatTempHum.csv&quot;, stringsAsFactors=FALSE, sep =&quot;;&quot;) # select temperature and remove empty cells df &lt;- df %&gt;% select(time, FlatA_Temp) %&gt;% na.omit() # create column with day for later grouping df$time &lt;- parse_date_time(df$time, &quot;YmdHMS&quot;, tz = &quot;Europe/Zurich&quot;) df$day &lt;- as.Date(cut(df$time, breaks = &quot;day&quot;)) df$day &lt;- as.Date(as.character(df$day,&quot;%Y-%m-%d&quot;)) # filter time range df &lt;- df %&gt;% filter(day &gt; startDate, day &lt; endDate) # calculate daily median, min and max of temperature df &lt;- df %&gt;% group_by(day) %&gt;% mutate(minDay = min(as.numeric(FlatA_Temp)), medianDay = median(as.numeric(FlatA_Temp)), maxDay = max(as.numeric(FlatA_Temp)) ) %&gt;% ungroup() # shrink down to daily values and remove rows with empty values df &lt;- df %&gt;% select(day, medianDay, minDay, maxDay) %&gt;% unique() %&gt;% na.omit() # calculate medians for time ranges df &lt;- df %&gt;% mutate(period = ifelse(day &gt;= startDate &amp; day &lt;= optiDate1, &quot;Baseline&quot;, ifelse((day &gt;= (as.Date(optiDate1) + optiDelayDays)) &amp; (day &lt;= optiDate2), &quot;Opti1&quot;, ifelse((day &gt;= (as.Date(optiDate2) + optiDelayDays)) &amp; (day &lt;= endDate), &quot;Opti2&quot;, NA) ))) df &lt;- df %&gt;% group_by(period) %&gt;% mutate(medianPeriod = ifelse(is.na(period), NA, median(medianDay))) %&gt;% ungroup() %&gt;% select(-period) # create xts object for plotting plotdata &lt;- xts( x=df[,-1], order.by=df$day) # plot graph dygraph(plotdata, main = &quot;Room Temperature Reduction&quot;) %&gt;% dyAxis(&quot;x&quot;, drawGrid = FALSE) %&gt;% dySeries(c(&quot;minDay&quot;, &quot;medianDay&quot;, &quot;maxDay&quot;), label = &quot;Temperature&quot;) %&gt;% dySeries(c(&quot;medianPeriod&quot;), label = &quot;Median Period&quot;, strokePattern = &quot;dashed&quot;) %&gt;% dyOptions(colors = RColorBrewer::brewer.pal(3, &quot;Set2&quot;)) %&gt;% dyEvent(x = optiDate1, label = optiLabel1, labelLoc = &quot;bottom&quot;, color = &quot;slategray&quot;, strokePattern = &quot;dotted&quot;) %&gt;% dyEvent(x = optiDate2, label = optiLabel2, labelLoc = &quot;bottom&quot;, color = &quot;slategray&quot;, strokePattern = &quot;dotted&quot;) %&gt;% dyLimit(tempSetpoint, color = &quot;red&quot;, label = &quot;Target Setpoint&quot;) %&gt;% dyRangeSelector() %&gt;% dyLegend(show = &quot;always&quot;) 6.1.4 Discussion In this example we used the dygraph package to create the graph. This package is fast and allows to show a rangeslider on the bottom of the graph. The exact same graph but without a slider is as well possible with ggplot. Please note that the calculation of the periodic median after optimization I and II starts delayed because it takes time until the building has cooled down. 6.2 Building Energy Signature 6.2.1 Task You want to create a scatter plot with the daily mean outside temperature on the x-axis the daily energy consumption on the y-axis points colored according to season 6.2.2 Basis Two separate csv files with time series data from the outside temperature and the energy data with unaligned time intervals Energy consumption time series from a energy meter with steadily increasing meter values 6.2.3 Solution After reading in the two time series the data has to get aggregated per day and then merged. Note that during the aggregation of the energy data you have to calculate the daily conspumption from the steadiliy increasing meter values as well. Create a new script, copy/paste the following code and run it: library(ggplot2) library(plotly) library(dplyr) library(redutils) library(lubridate) # load time series data and aggregate daily mean values dfOutsideTemp &lt;- read.csv(&quot;https://github.com/hslu-ige-laes/edar/raw/master/sampleData/centralOutsideTemp.csv&quot;, stringsAsFactors=FALSE, sep =&quot;;&quot;) dfOutsideTemp$time &lt;- parse_date_time(dfOutsideTemp$time, order = &quot;YmdHMS&quot;, tz = &quot;Europe/Zurich&quot;) dfOutsideTemp$day &lt;- as.Date(cut(dfOutsideTemp$time, breaks = &quot;day&quot;)) dfOutsideTemp &lt;- dfOutsideTemp %&gt;% group_by(day) %&gt;% mutate(tempMean = mean(centralOutsideTemp)) %&gt;% ungroup() dfOutsideTemp &lt;- dfOutsideTemp %&gt;% select(day, tempMean) %&gt;% unique() %&gt;% na.omit() dfHeatEnergy &lt;- read.csv(&quot;https://github.com/hslu-ige-laes/edar/raw/master/sampleData/centralHeating.csv&quot;, stringsAsFactors=FALSE, sep =&quot;;&quot;) dfHeatEnergy &lt;- dfHeatEnergy %&gt;% select(time, energyHeatingMeter) %&gt;% na.omit() dfHeatEnergy$time &lt;- parse_date_time(dfHeatEnergy$time, orders = &quot;YmdHMS&quot;, tz = &quot;Europe/Zurich&quot;) dfHeatEnergy$day &lt;- as.Date(cut(dfHeatEnergy$time, breaks = &quot;day&quot;)) dfHeatEnergy &lt;- dfHeatEnergy %&gt;% group_by(day) %&gt;% mutate(energyMax = max(energyHeatingMeter)) %&gt;% ungroup() dfHeatEnergy &lt;- dfHeatEnergy %&gt;% select(day, energyMax) %&gt;% unique() %&gt;% na.omit() dfHeatEnergy &lt;- dfHeatEnergy %&gt;% mutate(energyCons = energyMax - lag(energyMax)) %&gt;% select(-energyMax) %&gt;% na.omit() # merge the data in a tidy format df &lt;- merge(dfOutsideTemp, dfHeatEnergy, by = &quot;day&quot;) # calculate season df &lt;- df %&gt;% mutate(season = redutils::season(df$day)) # static chart with ggplot p &lt;- ggplot2::ggplot(df) + ggplot2::geom_point(aes(x = tempMean, y = energyCons, color = season, alpha = 0.1, text = paste(&quot;&lt;/br&gt;Date: &quot;, as.Date(df$day), &quot;&lt;/br&gt;Temp: &quot;, round(df$tempMean, digits = 1), &quot;\\u00B0C&quot;, &quot;&lt;/br&gt;Energy: &quot;, round(df$energyCons, digits = 0), &quot;kWh/d&quot;, &quot;&lt;/br&gt;Season: &quot;, df$season)) ) + scale_color_manual(values=c(&quot;#440154&quot;, &quot;#2db27d&quot;, &quot;#fde725&quot;, &quot;#365c8d&quot;)) + ggtitle(&quot;Building Energy Signature&quot;) + theme_minimal() + theme( legend.position=&quot;none&quot;, plot.title = element_text(hjust = 0.5) ) # interactive chart plotly::ggplotly(p, tooltip = c(&quot;text&quot;)) %&gt;% layout(xaxis = list(title = &quot;Outside temperature (\\u00B0C)&quot;, range = c(min(-5,min(df$tempMean)), max(35,max(df$tempMean))), zeroline = F), yaxis = list(title = &quot;Daily energy consumption (kWh/d)&quot;, range = c(-5, max(df$energyCons) + 10)), showlegend = TRUE ) %&gt;% plotly::config(displayModeBar = FALSE, displaylogo = FALSE) 6.3 Daily Energy Profiles # change language to English, otherwise weekdays are in local language Sys.setlocale(&quot;LC_TIME&quot;, &quot;English&quot;) ## [1] &quot;English_United States.1252&quot; library(plotly) library(dplyr) library(lubridate) # load time series data df &lt;- read.csv(&quot;https://github.com/hslu-ige-laes/edar/raw/master/sampleData/eboBookEleMeter.csv&quot;, stringsAsFactors=FALSE, sep =&quot;;&quot;) # rename column names colnames(df) &lt;- c(&quot;timestamp&quot;, &quot;meterValue&quot;) df$timestamp &lt;- parse_date_time(df$timestamp, orders = &quot;YmdHMS&quot;, tz = &quot;Europe/Zurich&quot;) df$timestamp &lt;- force_tz(df$timestamp, tzone = &quot;UTC&quot;) # filter time range if necessary #df &lt;- df %&gt;% filter(timestamp &gt; &quot;2019-11-01 00:00:00&quot;, timestamp &lt; &quot;2020-04-01 00:00:00&quot;) # Fill missing values with NA grid.df &lt;- data.frame(timestamp = seq(df[1, 1], df[nrow(df), 1], by = &quot;15 mins&quot;)) df &lt;- merge(df, grid.df, all = TRUE) # convert steadily counting energy meter value from kWh to power in kW df &lt;- df %&gt;% mutate(value = (meterValue - lag(meterValue))*4) %&gt;% select(-meterValue) %&gt;% na.omit() # add metadata for later grouping and visualization purposes df$x &lt;- hour(df$timestamp) + minute(df$timestamp)/60 + second(df$timestamp) / 3600 # df$time &lt;- format(df$timestamp, &quot;%H:%M&quot;) df$time &lt;- format(as.POSIXct(strptime(df$timestamp, &quot;%Y-%m-%d %H:%M:%S&quot;,tz=&quot;&quot;)) ,format = &quot;%H:%M&quot;) df$time &lt;- as.POSIXct(df$time, format = &quot;%H:%M&quot;) df$weekday &lt;- weekdays(df$timestamp) df$weekday &lt;- factor(df$weekday, c(&quot;Monday&quot;,&quot;Tuesday&quot;,&quot;Wednesday&quot;,&quot;Thursday&quot;,&quot;Friday&quot;,&quot;Saturday&quot;, &quot;Sunday&quot;)) # df$day &lt;- as.Date(cut(df$timestamp, breaks = &quot;day&quot;)) df$day &lt;- as.Date(df$timestamp, format = &quot;%Y-%m-%d %H:%M:%S&quot;) df &lt;- df %&gt;% mutate(value = ifelse(x == 0.00, NA, df$value)) # plot graph with all time series df %&gt;% highlight_key(~day) %&gt;% plot_ly(x=~x, y=~value, color=~weekday, type=&quot;scatter&quot;, mode=&quot;lines&quot;, line = list(width = 1), alpha = 0.15, colors = &quot;dodgerblue4&quot;, text = ~day, hovertemplate = paste(&quot;Time: &quot;, format(df$time, &quot;%H:%M&quot;), &quot;&lt;br&gt;Date: &quot;, format(df$time, &quot;%Y-%m-%d&quot;), &quot;&lt;br&gt;Value: %{y:.0f}&quot;)) %&gt;% layout(title = &quot;Superimposed Profiles of Power Consumption per 15 min&quot;, showlegend = TRUE, xaxis = list( title = &quot;Hour of day&quot;, tickvals = list(0, 3, 6, 9, 12, 15, 18, 21), showline=TRUE ), yaxis = list( title = &quot;Power (kW)&quot;, range = c(0, max(df$value)*1.05) ) ) %&gt;% highlight(on = &quot;plotly_hover&quot;, off = &quot;plotly_doubleclick&quot;, color = &quot;orange&quot;, opacityDim = 1.0) %&gt;% plotly::config(modeBarButtons = list(list(&quot;toImage&quot;)), displaylogo = FALSE) # Calculate Mean value for all 15 minutes for each weekday df &lt;- df %&gt;% group_by(weekday, x) %&gt;% mutate(dayTimeMean = mean(value)) %&gt;% ungroup() # shrink data frame df &lt;- df %&gt;% select(x, weekday, time, dayTimeMean) %&gt;% unique() %&gt;% na.omit() %&gt;% arrange(weekday, x) # plot graph with mean values df %&gt;% highlight_key(~weekday) %&gt;% plot_ly(x=~x, y=~dayTimeMean, color=~weekday, type=&quot;scatter&quot;, mode=&quot;lines&quot;, alpha = 0.25, colors = &quot;dodgerblue4&quot;, text = ~weekday, hovertemplate = paste(&quot;Time: &quot;, format(df$time, &quot;%H:%M&quot;), &quot;&lt;br&gt;Mean: %{y:.0f}&quot;)) %&gt;% layout(title = &quot;Superimposed Mean Profiles of Power Consumption per 15 min&quot;, showlegend = TRUE, xaxis = list( title = &quot;Hour of day&quot;, tickvals = list(0, 3, 6, 9, 12, 15, 18, 21) ), yaxis = list( title = &quot;Power (kW)&quot;, range = c(0, max(df$dayTimeMean)*1.05) ) ) %&gt;% highlight(on = &quot;plotly_hover&quot;, off = &quot;plotly_doubleclick&quot;, color = &quot;orange&quot;, opacityDim = 0.7) %&gt;% plotly::config(modeBarButtons = list(list(&quot;toImage&quot;)), displaylogo = FALSE) 6.4 Mollier hx Diagram 6.4.1 Task You want to plot a mollier h-x diagram with scatter plot of temperature- and humidity sensor data (mean values per day) points colored according to season comfort zone 6.4.2 Basis A csv file with time series from multiple temperature and humidity sensors in °C and %rH 6.4.3 Solution The sensor data is not in a constant intervall and not yet aggregated. So after reading in the time series the data has to get filtered and aggregated per day. Finally use the plot function mollierHxDiagram from the redutils package (R Energy Data Utilities). If you have not yet installed this package, proceed as follows: install.packages(&quot;devtools&quot;) library(devtools) install_github(&quot;hslu-ige-laes/redutils&quot;) Create a new script, copy/paste the following code and run it: library(redutils) library(dplyr) library(r2d3) library(lubridate) # read and print data data &lt;- read.csv(&quot;https://github.com/hslu-ige-laes/edar/raw/master/sampleData/flatTempHum.csv&quot;, stringsAsFactors=FALSE, sep =&quot;;&quot;) # select temperature and humidity and remove empty cells data &lt;- data %&gt;% select(time, FlatA_Temp, FlatA_Hum) %&gt;% na.omit() # create column with day for later grouping data$time &lt;- parse_date_time(data$time, &quot;YmdHMS&quot;, tz = &quot;Europe/Zurich&quot;) data$day &lt;- as.Date(cut(data$time, breaks = &quot;day&quot;)) # calculate daily mean of temperature and humidity data &lt;- data %&gt;% group_by(day) %&gt;% mutate(tempMean = mean(as.numeric(FlatA_Temp)), humMean = mean(as.numeric(FlatA_Hum)) ) %&gt;% ungroup() # shrink down to daily values and remove rows with empty values data &lt;- data %&gt;% select(day, tempMean, humMean) %&gt;% unique() %&gt;% na.omit() # plot mollier hx diagram redutils::mollierHxDiagram(data) 6.4.4 Discussion The diagram is based on D3 and packaged into the package redutils. The original D3 source with a html integration you can find here: https://github.com/hslu-ige-laes/d3-mollierhx 6.4.5 See Also If your two time series are in separate files, you must first read them in separately and then merge them into one data frame. See chapter 4.2.4 "],["packages.html", "A Packages in R A.1 Installing a Package A.2 Loading a Package A.3 Upgrading Packages", " A Packages in R Many functions of R are not pre-installed and must be loaded manually. R packages are similar to libraries in C, Python etc. An R package bundles useful functions, help files and data sets. You can use these functions within your own R code once you load the package. The following chapters describe how to install, load, update and use packages. A.1 Installing a Package The easiest way to install an R Package is to use the RStudio tab Packages: Figure A.1: Install packages via RStudio GUI Click on the Packages tab Click on Install next to Update Type the name of the package under Packages, in this case type ggplot2 Click Install This will search for the package ggplot specified on a server (the so-called CRAN website). If the package exists, it will be downloaded to a library folder on your computer. Here R can access the package in future R sessions without having to reinstall it. An other way is to use the install.packages function. Open R (if already opened please close all projects) and type the following at the command line: install.packages(&quot;ggplot2&quot;) If you want to install a package directly from github, the package devtools must be installed first: install.packages(&quot;devtools&quot;) library(devtools) install_github(&quot;hslu-ige-laes/redutils&quot;) A.2 Loading a Package If you have installed a package, its functions are not yet available in your R project. To use an R package in your sript, you must load it with the following command: install.packages(&quot;ggplot2&quot;) A.3 Upgrading Packages R packages are often constantly updated on CRAN or GitHub, so you may want to update them once in a while with: update.packages(ask = FALSE) "]]
