[["data-wrangling.html", "Chapter 3 Data Wrangling ", " Chapter 3 Data Wrangling "],["add-metadata-for-later-filtering.html", "3.1 Add Metadata for later filtering", " 3.1 Add Metadata for later filtering Firstly we have to load the required libraries and import a dataset into a dataframe: # load data set data &lt;- read.csv(&quot;https://github.com/hslu-ige-laes/edar/raw/master/sampleData/centralOutsideTemp.csv&quot;, stringsAsFactors=FALSE, sep =&quot;;&quot;) 3.1.1 Add Year, Month, Day To group, filter and aggregate data we need to have a the date splitted up in day, month and year separately: library(dplyr) library(lubridate) df &lt;- data df$time &lt;- parse_date_time(df$time, &quot;YmdHMS&quot;, tz = &quot;Europe/Zurich&quot;) df$year &lt;- as.Date(cut(df$time, breaks = &quot;year&quot;)) df$month &lt;- as.Date(cut(df$time, breaks = &quot;month&quot;)) df$day &lt;- as.Date(cut(df$time, breaks = &quot;day&quot;)) This code first parses the timestamp with a specific timezone. Then three columns are added. Please note that the month also contains the year and a day. This is useful for a later step where you can group the series afterwards. head(df,2) ## time centralOutsideTemp year month day ## 1 2018-03-21 11:00:00 5.2 2018-01-01 2018-03-01 2018-03-21 ## 2 2018-03-21 12:00:00 6.7 2018-01-01 2018-03-01 2018-03-21 tail(df,2) ## time centralOutsideTemp year month day ## 21864 2020-09-17 10:00:00 26.65 2020-01-01 2020-09-01 2020-09-17 ## 21865 2020-09-17 11:00:00 28.10 2020-01-01 2020-09-01 2020-09-17 3.1.2 Add Season of Year For some analyses it is useful to color single points of a scatterplot according to the season. For this we need to have the season in a separate column: # install redutils library # devtools::install_github(&quot;retomarek/redutils&quot;, ref = &quot;master&quot;) # get season from a date redutils::season(as.Date(&quot;2019-04-01&quot;)) ## [1] &quot;Spring&quot; If you want to change the language, you can give the function dedicated names for the season: redutils::season(as.Date(&quot;2019-04-01&quot;), c(&quot;Winter&quot;,&quot;Frühling&quot;,&quot;Sommer&quot;,&quot;Herbst&quot;)) ## [1] &quot;Frühling&quot; To apply this function to a whole dataframe we can use the dplyr mutate function: df &lt;- data # apply it for a data frame df &lt;- dplyr::mutate(df, season = redutils::season(df$time)) head(df,2) ## time centralOutsideTemp season ## 1 2018-03-21 11:00:00 5.2 Spring ## 2 2018-03-21 12:00:00 6.7 Spring tail(df,2) ## time centralOutsideTemp season ## 21864 2020-09-17 10:00:00 26.65 Fall ## 21865 2020-09-17 11:00:00 28.10 Fall "]]
