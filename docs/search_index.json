[["index.html", "Energy Data Analysis with R Preface", " Energy Data Analysis with R Lucerne University of Sciences and Arts, Engineering &amp; Architecture, Institute of Building Technology and Energy IGE, Reto Marek 2020-10-31 Preface This document gives you a short overview of the statistical software R and its ability to analyze and visualize time series in the context of building energy and comfort. This book is aimed at R beginners as well as advanced R users and is strongly inspired by the [R Graphics Cookbook] (https://r-graphics.org/). The goal of this book is to additionaly provide specific recipes for energy and comfort related tasks. The recipes in this book will show you how to complete certain specific tasks. Examples are shown so that you can understand the basic principle and reproduce the analysis or visualization with your own data. "],["why-r-and-rstudio.html", "0.1 Why R and RStudio?", " 0.1 Why R and RStudio? Spreadsheet programs like Excel quickly reach their limits when working with large data sets or creating complex graphics. Also the interactive ability of the graphics is limited. The open source programming language R and its graphical user interface RStudio offer many more possibilities for data analysis and data visualization. Disclaimer The authors decline any liability or responsibility in connection with the published documentation Â© Lucerne University of Sciences and Arts, 2020 "],["getting-started.html", "Chapter 1 Getting started", " Chapter 1 Getting started First you have to install R and RStudio. "],["r-basics.html", "Chapter 2 R Basics ", " Chapter 2 R Basics "],["importing-data.html", "2.1 Importing data", " 2.1 Importing data 2.1.1 csv file df &lt;- read.csv(&quot;datafile.csv&quot;) df &lt;- read.csv(&quot;datafile.csv&quot;, header=FALSE, stringsAsFactors=FALSE) df &lt;- read.csv(&quot;https://github.com/retomarek/r/raw/master/datasets/buildingMonitoringTestDataSet.csv&quot;, stringsAsFactors=FALSE, sep =&quot;,&quot; ) Attention: By default, strings in the data are treated as factors. read.csv() is a convenience wrapper function around read.table(). If you need more control over the input, see ?read.table 2.1.2 Excel File # Only need to install once install.packages(&quot;xlsx&quot;) library(xslx) df &lt;- read.xlsx(&quot;datafile.xlsx&quot;, 1) df &lt;- read.xlsx(&quot;datafile.xls&quot;, sheetIndex=2) df &lt;- read.xlsx(&quot;datafile.xls&quot;, sheetName=&quot;Revenues&quot;) For reading older Excel files in the .xls format, the gdata package has the function read.xls(): # Only need to install once install.packages(&quot;gdata&quot;) library(gdata) # Read first sheet df &lt;- read.xls(&quot;datafile.xls&quot;) df &lt;- read.xls(&quot;datafile.xls&quot;, sheet=2) Both the xlsx and gdata packages require other software to be installed on your computer. For xlsx, you need to install Java on your machine. For gdata, you need Perl, which comes as standard on Linux and Mac OS X, but not Windows. On Windows, youll need ActiveState Perl. The Community Edition can be obtained for free. "],["data-manipulations.html", "2.2 Data manipulations", " 2.2 Data manipulations 2.2.1 data frames 2.2.1.1 change row names of df names(df) &lt;- c(&quot;Column1&quot;,&quot;Column2&quot;,&quot;Column3&quot;) 2.2.2 wide to long # wide format head(df) ## time WthStnPress WthStnHum WthStnRain WthStnSolRad ## 1 2018-09-30T22:00:00.000Z 1012.30 87.0 0.8 0 ## 2 2018-09-30T23:00:00.000Z 1011.90 87.5 1.1 0 ## 3 2018-10-01T00:00:00.000Z 1011.45 87.5 0.5 0 ## 4 2018-10-01T01:00:00.000Z 1010.90 86.5 0.5 0 ## 5 2018-10-01T02:00:00.000Z 1010.55 88.0 0.6 0 ## 6 2018-10-01T03:00:00.000Z 1010.20 89.0 0.1 0 ## WthStnTemp WthStnWindDir WthStnWindSpd BldgEnergyHotwater BldgEnergyHeating ## 1 12.80 157.50 3.2 0 0 ## 2 12.35 11.25 1.6 19 0 ## 3 11.90 146.25 2.4 0 0 ## 4 11.90 157.50 0.8 0 0 ## 5 11.60 146.25 2.4 0 0 ## 6 11.75 22.50 0.8 0 0 ## FlatHum FlatTemp FlatVolFlowColdwater FlatVolFlowHotwater ## 1 NA NA 0.006 0 ## 2 NA NA 0.000 0 ## 3 NA NA 0.000 0 ## 4 NA NA 0.000 0 ## 5 NA NA 0.006 0 ## 6 NA NA 0.000 0 # convert wide to long format df.long &lt;- as.data.frame(tidyr::pivot_longer(df, cols = -time, names_to = &quot;name&quot;, values_to = &quot;value&quot;, values_drop_na = TRUE) ) # long format head(df.long) ## time name value ## 1 2018-09-30T22:00:00.000Z WthStnPress 1012.3 ## 2 2018-09-30T22:00:00.000Z WthStnHum 87.0 ## 3 2018-09-30T22:00:00.000Z WthStnRain 0.8 ## 4 2018-09-30T22:00:00.000Z WthStnSolRad 0.0 ## 5 2018-09-30T22:00:00.000Z WthStnTemp 12.8 ## 6 2018-09-30T22:00:00.000Z WthStnWindDir 157.5 2.2.3 long to wide # long format head(df.long) ## time name value ## 1 2018-09-30T22:00:00.000Z WthStnPress 1012.3 ## 2 2018-09-30T22:00:00.000Z WthStnHum 87.0 ## 3 2018-09-30T22:00:00.000Z WthStnRain 0.8 ## 4 2018-09-30T22:00:00.000Z WthStnSolRad 0.0 ## 5 2018-09-30T22:00:00.000Z WthStnTemp 12.8 ## 6 2018-09-30T22:00:00.000Z WthStnWindDir 157.5 # convert long table into wide table df.wide &lt;- as.data.frame(tidyr::pivot_wider(df.long, names_from = &quot;name&quot;, values_from = &quot;value&quot;) ) # wide format head(df.wide) ## time WthStnPress WthStnHum WthStnRain WthStnSolRad ## 1 2018-09-30T22:00:00.000Z 1012.30 87.0 0.8 0 ## 2 2018-09-30T23:00:00.000Z 1011.90 87.5 1.1 0 ## 3 2018-10-01T00:00:00.000Z 1011.45 87.5 0.5 0 ## 4 2018-10-01T01:00:00.000Z 1010.90 86.5 0.5 0 ## 5 2018-10-01T02:00:00.000Z 1010.55 88.0 0.6 0 ## 6 2018-10-01T03:00:00.000Z 1010.20 89.0 0.1 0 ## WthStnTemp WthStnWindDir WthStnWindSpd BldgEnergyHotwater BldgEnergyHeating ## 1 12.80 157.50 3.2 0 0 ## 2 12.35 11.25 1.6 19 0 ## 3 11.90 146.25 2.4 0 0 ## 4 11.90 157.50 0.8 0 0 ## 5 11.60 146.25 2.4 0 0 ## 6 11.75 22.50 0.8 0 0 ## FlatVolFlowColdwater FlatVolFlowHotwater FlatHum FlatTemp ## 1 0.006 0 NA NA ## 2 0.000 0 NA NA ## 3 0.000 0 NA NA ## 4 0.000 0 NA NA ## 5 0.006 0 NA NA ## 6 0.000 0 NA NA "],["explorative-data-analysis.html", "Chapter 3 Explorative Data Analysis ", " Chapter 3 Explorative Data Analysis "],["get-overview.html", "3.1 Get overview", " 3.1 Get overview Get an overview of the whole data set and specific series of it 3.1.1 Load data Load test data set in a data frame (e.g. from a csv-file) df &lt;- read.csv(&quot;https://github.com/retomarek/r/raw/master/datasets/buildingMonitoringTestDataSet.csv&quot;, stringsAsFactors=FALSE, sep =&quot;,&quot; ) 3.1.2 Names show the column headers of the data frame names(df) ## [1] &quot;time&quot; &quot;WthStnPress&quot; &quot;WthStnHum&quot; ## [4] &quot;WthStnRain&quot; &quot;WthStnSolRad&quot; &quot;WthStnTemp&quot; ## [7] &quot;WthStnWindDir&quot; &quot;WthStnWindSpd&quot; &quot;BldgEnergyHotwater&quot; ## [10] &quot;BldgEnergyHeating&quot; &quot;FlatHum&quot; &quot;FlatTemp&quot; ## [13] &quot;FlatVolFlowColdwater&quot; &quot;FlatVolFlowHotwater&quot; 3.1.3 Structure show the structure of the data frame str(df) ## &#39;data.frame&#39;: 16394 obs. of 14 variables: ## $ time : chr &quot;2018-09-30T22:00:00.000Z&quot; &quot;2018-09-30T23:00:00.000Z&quot; &quot;2018-10-01T00:00:00.000Z&quot; &quot;2018-10-01T01:00:00.000Z&quot; ... ## $ WthStnPress : num 1012 1012 1011 1011 1011 ... ## $ WthStnHum : num 87 87.5 87.5 86.5 88 89 86.5 81 78 80.5 ... ## $ WthStnRain : num 0.8 1.1 0.5 0.5 0.6 0.1 0.2 0 0 0 ... ## $ WthStnSolRad : num 0 0 0 0 0 0 0 0 3 24.5 ... ## $ WthStnTemp : num 12.8 12.4 11.9 11.9 11.6 ... ## $ WthStnWindDir : num 157.5 11.2 146.2 157.5 146.2 ... ## $ WthStnWindSpd : num 3.2 1.6 2.4 0.8 2.4 0.8 0.8 3.2 4 3.2 ... ## $ BldgEnergyHotwater : num 0 19 0 0 0 ... ## $ BldgEnergyHeating : num 0 0 0 0 0 0 0 0 0 0 ... ## $ FlatHum : num NA NA NA NA NA NA NA NA NA NA ... ## $ FlatTemp : num NA NA NA NA NA NA NA NA NA NA ... ## $ FlatVolFlowColdwater: num 0.006 0 0 0 0.006 ... ## $ FlatVolFlowHotwater : num 0 0 0 0 0 ... 3.1.4 Head/Tail head(df) ## time WthStnPress WthStnHum WthStnRain WthStnSolRad ## 1 2018-09-30T22:00:00.000Z 1012.30 87.0 0.8 0 ## 2 2018-09-30T23:00:00.000Z 1011.90 87.5 1.1 0 ## 3 2018-10-01T00:00:00.000Z 1011.45 87.5 0.5 0 ## 4 2018-10-01T01:00:00.000Z 1010.90 86.5 0.5 0 ## 5 2018-10-01T02:00:00.000Z 1010.55 88.0 0.6 0 ## 6 2018-10-01T03:00:00.000Z 1010.20 89.0 0.1 0 ## WthStnTemp WthStnWindDir WthStnWindSpd BldgEnergyHotwater BldgEnergyHeating ## 1 12.80 157.50 3.2 0 0 ## 2 12.35 11.25 1.6 19 0 ## 3 11.90 146.25 2.4 0 0 ## 4 11.90 157.50 0.8 0 0 ## 5 11.60 146.25 2.4 0 0 ## 6 11.75 22.50 0.8 0 0 ## FlatHum FlatTemp FlatVolFlowColdwater FlatVolFlowHotwater ## 1 NA NA 0.006 0 ## 2 NA NA 0.000 0 ## 3 NA NA 0.000 0 ## 4 NA NA 0.000 0 ## 5 NA NA 0.006 0 ## 6 NA NA 0.000 0 tail(df) ## time WthStnPress WthStnHum WthStnRain WthStnSolRad ## 16389 2020-08-13T18:00:00.000Z 1011.650 74.75 2.19964 9 ## 16390 2020-08-13T19:00:00.000Z 1012.000 79.00 2.19964 0 ## 16391 2020-08-13T20:00:00.000Z 1011.950 78.25 2.19964 0 ## 16392 2020-08-13T21:00:00.000Z 1012.025 76.50 2.19964 0 ## 16393 2020-08-13T22:00:00.000Z 1012.250 73.00 0.00000 0 ## 16394 2020-08-13T23:00:00.000Z NA NA NA NA ## WthStnTemp WthStnWindDir WthStnWindSpd BldgEnergyHotwater ## 16389 22.000 162.00 0.000000 NA ## 16390 20.175 124.25 1.609340 NA ## 16391 19.350 125.00 0.402335 NA ## 16392 19.900 93.00 1.609340 NA ## 16393 20.625 116.25 2.414010 NA ## 16394 NA NA NA NA ## BldgEnergyHeating FlatHum FlatTemp FlatVolFlowColdwater ## 16389 NA NA NA NA ## 16390 NA NA NA NA ## 16391 NA NA NA NA ## 16392 NA NA NA NA ## 16393 NA NA NA NA ## 16394 NA NA NA NA ## FlatVolFlowHotwater ## 16389 NA ## 16390 NA ## 16391 NA ## 16392 NA ## 16393 NA ## 16394 NA 3.1.5 Five number summary reveals details of a specific series summary(df$WthStnTemp) ## Min. 1st Qu. Median Mean 3rd Qu. Max. NA&#39;s ## -5.25 5.50 11.25 11.99 17.35 40.30 12 "],["data-wrangling.html", "3.2 Data Wrangling", " 3.2 Data Wrangling 3.2.1 season from date # install redutils library # devtools::install_github(&quot;retomarek/redutils&quot;, ref = &quot;master&quot;) # get season from a date redutils::season(as.Date(&quot;2019-04-01&quot;)) ## [1] &quot;Spring&quot; redutils::season(as.Date(&quot;2019-04-01&quot;), c(&quot;Winter&quot;,&quot;FrÃ¼hling&quot;,&quot;Sommer&quot;,&quot;Herbst&quot;)) ## [1] &quot;FrÃ¼hling&quot; # apply it for a data frame df.season &lt;- dplyr::mutate(df, season = redutils::season(df$time)) head(df.season) ## time WthStnPress WthStnHum WthStnRain WthStnSolRad ## 1 2018-09-30T22:00:00.000Z 1012.30 87.0 0.8 0 ## 2 2018-09-30T23:00:00.000Z 1011.90 87.5 1.1 0 ## 3 2018-10-01T00:00:00.000Z 1011.45 87.5 0.5 0 ## 4 2018-10-01T01:00:00.000Z 1010.90 86.5 0.5 0 ## 5 2018-10-01T02:00:00.000Z 1010.55 88.0 0.6 0 ## 6 2018-10-01T03:00:00.000Z 1010.20 89.0 0.1 0 ## WthStnTemp WthStnWindDir WthStnWindSpd BldgEnergyHotwater BldgEnergyHeating ## 1 12.80 157.50 3.2 0 0 ## 2 12.35 11.25 1.6 19 0 ## 3 11.90 146.25 2.4 0 0 ## 4 11.90 157.50 0.8 0 0 ## 5 11.60 146.25 2.4 0 0 ## 6 11.75 22.50 0.8 0 0 ## FlatHum FlatTemp FlatVolFlowColdwater FlatVolFlowHotwater season ## 1 NA NA 0.006 0 Fall ## 2 NA NA 0.000 0 Fall ## 3 NA NA 0.000 0 Fall ## 4 NA NA 0.000 0 Fall ## 5 NA NA 0.006 0 Fall ## 6 NA NA 0.000 0 Fall "],["basic-plots.html", "3.3 Basic plots", " 3.3 Basic plots 3.3.1 Scatterplot 3.3.1.1 plot() # load data set df &lt;- read.csv(&quot;https://github.com/retomarek/r/raw/master/datasets/buildingMonitoringTestDataSet.csv&quot;, stringsAsFactors=FALSE, sep =&quot;,&quot;) # crate simple scatterplot plot(df$WthStnTemp, df$BldgEnergyHeating) "],["data-visualizations.html", "Chapter 4 Data Visualizations ", " Chapter 4 Data Visualizations "],["general-plots.html", "4.1 General Plots", " 4.1 General Plots "],["building-energy-signature.html", "4.2 Building Energy Signature", " 4.2 Building Energy Signature 4.2.1 static library(ggplot2) library(plotly) library(dplyr) library(redutils) library(lubridate) # load data set df &lt;- read.csv(&quot;https://github.com/retomarek/r/raw/master/datasets/buildingMonitoringTestDataSet.csv&quot;, stringsAsFactors=FALSE, sep =&quot;,&quot;) # select data and calculate season data &lt;- df %&gt;% select(time, WthStnTemp, BldgEnergyHeating) %&gt;% mutate(season = redutils::season(df$time)) %&gt;% na.omit() # Aggregate data to daily values data$time &lt;- parse_date_time(data$time, &quot;YmdHMS&quot;, tz = &quot;Europe/Zurich&quot;) data$year &lt;- as.Date(cut(data$time, breaks = &quot;year&quot;)) data$month &lt;- as.Date(cut(data$time, breaks = &quot;month&quot;)) data$day &lt;- as.Date(cut(data$time, breaks = &quot;day&quot;)) data &lt;- data %&gt;% select(day, WthStnTemp, BldgEnergyHeating, season) %&gt;% group_by(day) %&gt;% mutate(WthStnTemp = mean(WthStnTemp)) data &lt;- data %&gt;% group_by(day) %&gt;% mutate(BldgEnergyHeating = sum(BldgEnergyHeating)) data &lt;- data %&gt;% unique() # static chart with ggplot p &lt;- ggplot2::ggplot(data) + ggplot2::geom_point(aes(x = WthStnTemp, y = BldgEnergyHeating, color=season, text = paste(&quot;&lt;/br&gt;Date: &quot;, as.Date(data$day), &quot;&lt;/br&gt;Temp: &quot;, round(data$WthStnTemp, digits = 1), &quot;\\u00B0C&quot;, &quot;&lt;/br&gt;Energy: &quot;, round(data$BldgEnergyHeating, digits = 0), &quot;kWh/d&quot;, &quot;&lt;/br&gt;Season: &quot;, data$season)) ) + ggtitle(&quot;Building Energy Signature&quot;) + theme_minimal() + theme( legend.position=&quot;none&quot;, plot.title = element_text(hjust = 0.5) ) p 4.2.2 interactive Make ggplot2 chart above interactive with plotly # continuation from upper ggplot code section plotly::ggplotly(p, tooltip = c(&quot;text&quot;)) %&gt;% layout(xaxis = list(title = &quot;Outside temperature (\\u00B0C)&quot;, range = c(min(-5,min(data$WthStnTemp)), max(35,max(data$WthStnTemp))), zeroline = F), yaxis = list(title = &quot;Daily energy consumption (kWh/d)&quot;, range = c(-5, max(data$BldgEnergyHeating) + 10)), showlegend = TRUE ) %&gt;% plotly::config(displayModeBar = FALSE, displaylogo = FALSE) "],["installation.html", "A Installing R and R Studio", " A Installing R and R Studio Before we can start the first analysis, we have to install R and RStudio. R is a programming language used for statistical computing while RStudio provides a graphical user interface. R may be used without RStudio, but RStudio may not be used without R. Both, R and RStudio are free of charge and there are no licencse fees. "],["download-and-install-r.html", "A.1 Download and Install R", " A.1 Download and Install R A.1.1 Windows Open https://cran.r-project.org/bin/windows/base/ and press the link Download R Run the downloaded installer file and follow the installation wizard The wizard will install R into your Program Files folders and add a shortcut in your Start menu. Note that you will need to have all necessary administration rights to install new software on your machine. A.1.2 Mac OSX Open https://cran.r-project.org/bin/macosx/ and download the latest *.pkg file Run the downloaded installer file and follow the installation wizard The installer allows you to customize your installation. However the default values will be suitable for most users. A.1.3 Linux R is part of many Linux distributions, therefore you should check with your Linux package management system if its already installed. The CRAN website provides files to build R from source on Debian, Redhat, SUSE, and Ubuntu systems under the link Download R for Linux Open https://cran.r-project.org/bin/linux/ and then follow the directory trail to the version of Linux you wish to install R on top of The exact installation procedure will vary depending on your Linux operating system. CRAN supports the process by grouping each set of source files with documentation or README files that explain how to install on your system. "],["download-and-install-rstudio.html", "A.2 Download and Install RStudio", " A.2 Download and Install RStudio R Studio is a development environment for R. Open https://rstudio.com/products/rstudio/download/ and download RStudio Desktop Open Source Follow the on-screen instructions Once you have installed R Studio, you can run it like any other application via "],["open-rstudio.html", "A.3 Open RStudio", " A.3 Open RStudio Now that you have both R and RStudio on your computer, you can begin using R by opening the RStudio program. Open RStudio just as you would any program, by clicking on its icon or by typing RStudio at the Windows Run prompt. "],["packages.html", "B Packages in R", " B Packages in R Many functions of R are not pre-installed and must be loaded manually. R packages are similar to libraries in C, Python etc. An R package bundles useful functions, help files and data sets. You can use these functions within your own R code once you load the package. The following describes how to load and use packages. "],["install-packages.html", "B.1 Install Packages", " B.1 Install Packages The easiest way to install an R Package is to use the RStudio tab Packages: Figure B.1: Install packages via RStudio GUI Click on the Packages tab Click on Install next to Update Type the name of the package under Packages, in this case type ggplot2 Click Install An other way is to use the install.packages function. Open R (if already opened please close all projects) and type the following at the command line: install.packages(&quot;ggplot2&quot;) This will search for the package ggplot specified on a server (the so-called CRAN website). If the package exists, it will be downloaded to a library folder on your computer. Here R can access the package in future R sessions without having to reinstall it. If you want to install a package directly from github, the package devtools must be installed first: install.packages(&quot;devtools&quot;) library(devtools) install_github(&quot;retomarek/redutils&quot;) "],["loading-packages.html", "B.2 Loading Packages", " B.2 Loading Packages If you have installed a package, its functions are not yet available in your R project. To use an R package in your sript, you must load it with the following command: install.packages(&quot;ggplot2&quot;) "],["updating-packages.html", "B.3 Updating Packages", " B.3 Updating Packages R packages are often constantly updated on CRAN or GitHub, so you may want to update them once in a while with: update.packages(ask = FALSE) "]]
